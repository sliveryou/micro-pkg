// Code generated by "enumer -type NotifyMethod -json -linecomment -output param_string.go"; DO NOT EDIT.

package types

import (
	"encoding/json"
	"fmt"
)

const _NotifyMethodName = "smsemail"

var _NotifyMethodIndex = [...]uint8{0, 3, 8}

func (i NotifyMethod) String() string {
	if i < 0 || i >= NotifyMethod(len(_NotifyMethodIndex)-1) {
		return fmt.Sprintf("NotifyMethod(%d)", i)
	}
	return _NotifyMethodName[_NotifyMethodIndex[i]:_NotifyMethodIndex[i+1]]
}

var _NotifyMethodValues = []NotifyMethod{0, 1}

var _NotifyMethodNameToValueMap = map[string]NotifyMethod{
	_NotifyMethodName[0:3]: 0,
	_NotifyMethodName[3:8]: 1,
}

// NotifyMethodString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NotifyMethodString(s string) (NotifyMethod, error) {
	if val, ok := _NotifyMethodNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NotifyMethod values", s)
}

// NotifyMethodValues returns all values of the enum
func NotifyMethodValues() []NotifyMethod {
	return _NotifyMethodValues
}

// IsANotifyMethod returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NotifyMethod) IsANotifyMethod() bool {
	for _, v := range _NotifyMethodValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for NotifyMethod
func (i NotifyMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for NotifyMethod
func (i *NotifyMethod) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("NotifyMethod should be a string, got %s", data)
	}

	var err error
	*i, err = NotifyMethodString(s)
	return err
}
